854001f8df2e82b4095efff782f76fec
"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _bioeditor = _interopRequireDefault(require("./bioeditor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

test("Add is rendered when no bio is passed", function () {
  var wrapper = (0, _enzyme.shallow)(_react["default"].createElement(_bioeditor["default"], null));
  expect(wrapper.find("button").length).toBe(1);
  expect(wrapper.find("button").text()).toEqual("Add your bio now!"); //.length here refers to how many button elements available
}); //test.only(...) is used to run for a particular selected test of this file

test("Edit is rendered when a bio text is passed", function () {
  var wrapper = (0, _enzyme.shallow)(_react["default"].createElement(_bioeditor["default"], {
    bioData: "some random text for bio testing"
  }));
  expect(wrapper.find("button").length).toBe(1);
  expect(wrapper.find("button").text()).toEqual("Edit");
}); //"Edit" string is case sensitive

test.only("clicking Edit button causes textarea and Save button to be rendered", function () {
  var wrapper = (0, _enzyme.shallow)(_react["default"].createElement(_bioeditor["default"], {
    bioData: "some random text for bio testing"
  }));
  wrapper.find("button").simulate("click");
  expect(wrapper.find("textarea").length).toBe(1);
  expect(wrapper.find("button").text()).toEqual("Save");
  var wrapper2 = (0, _enzyme.shallow)(_react["default"].createElement(_bioeditor["default"], null));
  wrapper2.find("button").simulate("click");
  expect(wrapper2.find("textarea").length).toBe(1);
  expect(wrapper2.find("button").text()).toEqual("Save");
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpb2VkaXRvci50ZXN0LmpzIl0sIm5hbWVzIjpbInRlc3QiLCJ3cmFwcGVyIiwiZXhwZWN0IiwiZmluZCIsImxlbmd0aCIsInRvQmUiLCJ0ZXh0IiwidG9FcXVhbCIsIm9ubHkiLCJzaW11bGF0ZSIsIndyYXBwZXIyIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUFBLElBQUksQ0FBQyx1Q0FBRCxFQUEwQyxZQUFNO0FBQ2hELE1BQU1DLE9BQU8sR0FBRyxxQkFBUSxnQ0FBQyxxQkFBRCxPQUFSLENBQWhCO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDRSxJQUFSLENBQWEsUUFBYixFQUF1QkMsTUFBeEIsQ0FBTixDQUFzQ0MsSUFBdEMsQ0FBMkMsQ0FBM0M7QUFDQUgsRUFBQUEsTUFBTSxDQUFDRCxPQUFPLENBQUNFLElBQVIsQ0FBYSxRQUFiLEVBQXVCRyxJQUF2QixFQUFELENBQU4sQ0FBc0NDLE9BQXRDLENBQThDLG1CQUE5QyxFQUhnRCxDQUloRDtBQUNILENBTEcsQ0FBSixDLENBT0E7O0FBQ0FQLElBQUksQ0FBQyw0Q0FBRCxFQUErQyxZQUFNO0FBQ3JELE1BQU1DLE9BQU8sR0FBRyxxQkFDWixnQ0FBQyxxQkFBRDtBQUFXLElBQUEsT0FBTyxFQUFDO0FBQW5CLElBRFksQ0FBaEI7QUFHQUMsRUFBQUEsTUFBTSxDQUFDRCxPQUFPLENBQUNFLElBQVIsQ0FBYSxRQUFiLEVBQXVCQyxNQUF4QixDQUFOLENBQXNDQyxJQUF0QyxDQUEyQyxDQUEzQztBQUNBSCxFQUFBQSxNQUFNLENBQUNELE9BQU8sQ0FBQ0UsSUFBUixDQUFhLFFBQWIsRUFBdUJHLElBQXZCLEVBQUQsQ0FBTixDQUFzQ0MsT0FBdEMsQ0FBOEMsTUFBOUM7QUFDSCxDQU5HLENBQUosQyxDQU9BOztBQUVBUCxJQUFJLENBQUNRLElBQUwsQ0FBVSxxRUFBVixFQUFpRixZQUFNO0FBQ25GLE1BQU1QLE9BQU8sR0FBRyxxQkFDWixnQ0FBQyxxQkFBRDtBQUFXLElBQUEsT0FBTyxFQUFDO0FBQW5CLElBRFksQ0FBaEI7QUFJQUEsRUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWEsUUFBYixFQUF1Qk0sUUFBdkIsQ0FBZ0MsT0FBaEM7QUFDQVAsRUFBQUEsTUFBTSxDQUFDRCxPQUFPLENBQUNFLElBQVIsQ0FBYSxVQUFiLEVBQXlCQyxNQUExQixDQUFOLENBQXdDQyxJQUF4QyxDQUE2QyxDQUE3QztBQUNBSCxFQUFBQSxNQUFNLENBQUNELE9BQU8sQ0FBQ0UsSUFBUixDQUFhLFFBQWIsRUFBdUJHLElBQXZCLEVBQUQsQ0FBTixDQUFzQ0MsT0FBdEMsQ0FBOEMsTUFBOUM7QUFFQSxNQUFNRyxRQUFRLEdBQUcscUJBQVEsZ0NBQUMscUJBQUQsT0FBUixDQUFqQjtBQUVBQSxFQUFBQSxRQUFRLENBQUNQLElBQVQsQ0FBYyxRQUFkLEVBQXdCTSxRQUF4QixDQUFpQyxPQUFqQztBQUNBUCxFQUFBQSxNQUFNLENBQUNRLFFBQVEsQ0FBQ1AsSUFBVCxDQUFjLFVBQWQsRUFBMEJDLE1BQTNCLENBQU4sQ0FBeUNDLElBQXpDLENBQThDLENBQTlDO0FBQ0FILEVBQUFBLE1BQU0sQ0FBQ1EsUUFBUSxDQUFDUCxJQUFULENBQWMsUUFBZCxFQUF3QkcsSUFBeEIsRUFBRCxDQUFOLENBQXVDQyxPQUF2QyxDQUErQyxNQUEvQztBQUNILENBZEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHNoYWxsb3cgfSBmcm9tIFwiZW56eW1lXCI7XHJcbmltcG9ydCBCaW9FZGl0b3IgZnJvbSBcIi4vYmlvZWRpdG9yXCI7XHJcblxyXG50ZXN0KFwiQWRkIGlzIHJlbmRlcmVkIHdoZW4gbm8gYmlvIGlzIHBhc3NlZFwiLCAoKSA9PiB7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyg8QmlvRWRpdG9yIC8+KTtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoXCJidXR0b25cIikubGVuZ3RoKS50b0JlKDEpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChcImJ1dHRvblwiKS50ZXh0KCkpLnRvRXF1YWwoXCJBZGQgeW91ciBiaW8gbm93IVwiKTtcclxuICAgIC8vLmxlbmd0aCBoZXJlIHJlZmVycyB0byBob3cgbWFueSBidXR0b24gZWxlbWVudHMgYXZhaWxhYmxlXHJcbn0pO1xyXG5cclxuLy90ZXN0Lm9ubHkoLi4uKSBpcyB1c2VkIHRvIHJ1biBmb3IgYSBwYXJ0aWN1bGFyIHNlbGVjdGVkIHRlc3Qgb2YgdGhpcyBmaWxlXHJcbnRlc3QoXCJFZGl0IGlzIHJlbmRlcmVkIHdoZW4gYSBiaW8gdGV4dCBpcyBwYXNzZWRcIiwgKCkgPT4ge1xyXG4gICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coXHJcbiAgICAgICAgPEJpb0VkaXRvciBiaW9EYXRhPVwic29tZSByYW5kb20gdGV4dCBmb3IgYmlvIHRlc3RpbmdcIiAvPlxyXG4gICAgKTtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoXCJidXR0b25cIikubGVuZ3RoKS50b0JlKDEpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChcImJ1dHRvblwiKS50ZXh0KCkpLnRvRXF1YWwoXCJFZGl0XCIpO1xyXG59KTtcclxuLy9cIkVkaXRcIiBzdHJpbmcgaXMgY2FzZSBzZW5zaXRpdmVcclxuXHJcbnRlc3Qub25seShcImNsaWNraW5nIEVkaXQgYnV0dG9uIGNhdXNlcyB0ZXh0YXJlYSBhbmQgU2F2ZSBidXR0b24gdG8gYmUgcmVuZGVyZWRcIiwgKCkgPT4ge1xyXG4gICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coXHJcbiAgICAgICAgPEJpb0VkaXRvciBiaW9EYXRhPVwic29tZSByYW5kb20gdGV4dCBmb3IgYmlvIHRlc3RpbmdcIiAvPlxyXG4gICAgKTtcclxuXHJcbiAgICB3cmFwcGVyLmZpbmQoXCJidXR0b25cIikuc2ltdWxhdGUoXCJjbGlja1wiKTtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoXCJ0ZXh0YXJlYVwiKS5sZW5ndGgpLnRvQmUoMSk7XHJcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKFwiYnV0dG9uXCIpLnRleHQoKSkudG9FcXVhbChcIlNhdmVcIik7XHJcblxyXG4gICAgY29uc3Qgd3JhcHBlcjIgPSBzaGFsbG93KDxCaW9FZGl0b3IgLz4pO1xyXG5cclxuICAgIHdyYXBwZXIyLmZpbmQoXCJidXR0b25cIikuc2ltdWxhdGUoXCJjbGlja1wiKTtcclxuICAgIGV4cGVjdCh3cmFwcGVyMi5maW5kKFwidGV4dGFyZWFcIikubGVuZ3RoKS50b0JlKDEpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIyLmZpbmQoXCJidXR0b25cIikudGV4dCgpKS50b0VxdWFsKFwiU2F2ZVwiKTtcclxufSk7XHJcbiJdfQ==