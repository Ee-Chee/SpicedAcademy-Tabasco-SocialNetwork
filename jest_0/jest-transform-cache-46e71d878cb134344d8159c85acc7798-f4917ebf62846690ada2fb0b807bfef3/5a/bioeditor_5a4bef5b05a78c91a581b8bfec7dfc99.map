{"version":3,"sources":["bioeditor.js"],"names":["BioEditor","props","state","biotext","submit","bind","axios","post","bio","then","resp","data","rows","setState","added","toggleBioTextField","bioHandler","bioData","e","target","value","React","Component"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;IAEqBA,S;;;;;AACjB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa,EAAb;AACA,UAAKC,OAAL;AACA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,+BAAd;AAJe;AAKlB;;;;6BAEQ;AAAA;;AACLC,wBAAMC,IAAN,CAAW,WAAX,EAAwB;AAAEC,QAAAA,GAAG,EAAE,KAAKL;AAAZ,OAAxB,EAA+CM,IAA/C,CAAoD,UAAAC,IAAI,EAAI;AACxD;AACA,YAAI,CAACA,IAAI,CAACC,IAAL,CAAUC,IAAV,CAAe,CAAf,EAAkBT,OAAvB,EAAgC;AAC5B,UAAA,MAAI,CAACU,QAAL,CAAc;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAd;AACH,SAJuD,CAItD;;;AACF,QAAA,MAAI,CAACD,QAAL,CAAc;AAAEE,UAAAA,kBAAkB,EAAE;AAAtB,SAAd;;AACA,QAAA,MAAI,CAACd,KAAL,CAAWe,UAAX,CAAsB,CAClBN,IAAI,CAACC,IAAL,CAAUC,IAAV,CAAe,CAAf,EAAkBT,OADA,EAElB,MAAI,CAACD,KAAL,CAAWa,kBAFO,CAAtB,EANwD,CAWxD;;AACH,OAZD;AAaH,K,CAED;AACA;;;;6BAES;AAAA;;AACL,aACI,6CACK,CAAC,KAAKd,KAAL,CAAWgB,OAAZ,IAAuB,CAAC,KAAKf,KAAL,CAAWY,KAAnC,IACG,+DAFR,EAaK,KAAKZ,KAAL,CAAWa,kBAAX,IACG;AACA,mDACI;AACI;AACA,QAAA,IAAI,EAAC,GAFT;AAGI,QAAA,IAAI,EAAC,IAHT;AAII,QAAA,WAAW,EAAC,mBAJhB;AAKI,QAAA,YAAY,EAAE,KAAKd,KAAL,CAAWgB,OAL7B;AAMI,QAAA,QAAQ,EAAE,kBAAAC,CAAC,EAAI;AACX,UAAA,MAAI,CAACf,OAAL,GAAee,CAAC,CAACC,MAAF,CAASC,KAAxB;AACH;AARL,QADJ,EAWI;AAAQ,QAAA,OAAO,EAAE,KAAKhB;AAAtB,gBAXJ,CAfR,EA6BK,KAAKH,KAAL,CAAWgB,OAAX,IAAsB,CAAC,KAAKf,KAAL,CAAWa,kBAAlC,IACG,6CACK,KAAKd,KAAL,CAAWgB,OADhB,EAEI;AACI,QAAA,OAAO,EAAE;AAAA,iBACL,MAAI,CAACJ,QAAL,CAAc;AAAEE,YAAAA,kBAAkB,EAAE;AAAtB,WAAd,CADK;AAAA;AADb,gBAFJ,CA9BR,CADJ;AA4CH;;;;EAxEkCM,kBAAMC,S,GA0E7C;AACA","sourcesContent":["import React from \"react\";\r\nimport axios from \"./axios\";\r\n\r\nexport default class BioEditor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.biotext;\r\n        this.submit = this.submit.bind(this);\r\n    }\r\n\r\n    submit() {\r\n        axios.post(\"/bioinput\", { bio: this.biotext }).then(resp => {\r\n            // console.log(\"return\", resp.data.rows[0].biotext);\r\n            if (!resp.data.rows[0].biotext) {\r\n                this.setState({ added: false });\r\n            } //if no biodata, restart again because no data added\r\n            this.setState({ toggleBioTextField: false });\r\n            this.props.bioHandler([\r\n                resp.data.rows[0].biotext,\r\n                this.state.toggleBioTextField\r\n            ]);\r\n\r\n            // console.log(this.state.toggleBioTextField);\r\n        });\r\n    }\r\n\r\n    //the biotext must be passed to mounted function so that, it appears on the page after user relogin.\r\n    //Supposingly, pass it to grandparent App <= profile <=bioeditor. But when using short-cut approach, straight away modify only biodata function on App grandparent\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.props.bioData && !this.state.added && (\r\n                    <button\r\n                    // onClick={() => {\r\n                    //     this.setState({\r\n                    //         toggleBioTextField: true,\r\n                    //         added: true\r\n                    //     });\r\n                    // }}\r\n                    >\r\n                        Add your bio\r\n                    </button>\r\n                )}\r\n                {this.state.toggleBioTextField && (\r\n                    //if two elements/tags needed, pack them up\r\n                    <div>\r\n                        <textarea\r\n                            // type=\"text\"\r\n                            rows=\"5\"\r\n                            cols=\"20\"\r\n                            placeholder=\"More about you...\"\r\n                            defaultValue={this.props.bioData}\r\n                            onChange={e => {\r\n                                this.biotext = e.target.value;\r\n                            }}\r\n                        />\r\n                        <button onClick={this.submit}>Save</button>\r\n                    </div>\r\n                )}\r\n                {this.props.bioData && !this.state.toggleBioTextField && (\r\n                    <div>\r\n                        {this.props.bioData}\r\n                        <button\r\n                            onClick={() =>\r\n                                this.setState({ toggleBioTextField: true })\r\n                            }\r\n                        >\r\n                            Edit\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n//this.props.bioData refers to the data/bio saved in database!!!\r\n//USE only {} and \"\" inside Return!!!!. This is JSL rule\r\n"]}