{"version":3,"sources":["bioeditor.test.js"],"names":["jest","mock","test","wrapper","expect","find","length","toBe","text","toEqual","simulate","wrapper2","only","axios","post","mockResolvedValue","data","rows","biotext","mockFn","disableLifecycleMethods","instance","submit","fn","calls"],"mappings":";;AAKAA,IAAI,CAACC,IAAL,CAAU,SAAV;;AALA;;AACA;;AACA;;AACA;;;;;;;;AAIAC,IAAI,CAAC,uCAAD,EAA0C,YAAM;AAChD,MAAMC,OAAO,GAAG,qBAAQ,gCAAC,qBAAD,OAAR,CAAhB;AACAC,EAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,QAAb,EAAuBC,MAAxB,CAAN,CAAsCC,IAAtC,CAA2C,CAA3C;AACAH,EAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,QAAb,EAAuBG,IAAvB,EAAD,CAAN,CAAsCC,OAAtC,CAA8C,mBAA9C,EAHgD,CAIhD;AACH,CALG,CAAJ,C,CAOA;;AACAP,IAAI,CAAC,4CAAD,EAA+C,YAAM;AACrD,MAAMC,OAAO,GAAG,qBACZ,gCAAC,qBAAD;AAAW,IAAA,OAAO,EAAC;AAAnB,IADY,CAAhB;AAGAC,EAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,QAAb,EAAuBC,MAAxB,CAAN,CAAsCC,IAAtC,CAA2C,CAA3C;AACAH,EAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,QAAb,EAAuBG,IAAvB,EAAD,CAAN,CAAsCC,OAAtC,CAA8C,MAA9C;AACH,CANG,CAAJ,C,CAOA;;AAEAP,IAAI,CAAC,4EAAD,EAA+E,YAAM;AACrF,MAAMC,OAAO,GAAG,qBACZ,gCAAC,qBAAD;AAAW,IAAA,OAAO,EAAC;AAAnB,IADY,CAAhB;AAGAA,EAAAA,OAAO,CAACE,IAAR,CAAa,QAAb,EAAuBK,QAAvB,CAAgC,OAAhC;AACAN,EAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,UAAb,EAAyBC,MAA1B,CAAN,CAAwCC,IAAxC,CAA6C,CAA7C;AACAH,EAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,QAAb,EAAuBG,IAAvB,EAAD,CAAN,CAAsCC,OAAtC,CAA8C,MAA9C;AAEA,MAAME,QAAQ,GAAG,qBAAQ,gCAAC,qBAAD,OAAR,CAAjB;AACAA,EAAAA,QAAQ,CAACN,IAAT,CAAc,QAAd,EAAwBK,QAAxB,CAAiC,OAAjC;AACAN,EAAAA,MAAM,CAACO,QAAQ,CAACN,IAAT,CAAc,UAAd,EAA0BC,MAA3B,CAAN,CAAyCC,IAAzC,CAA8C,CAA9C;AACAH,EAAAA,MAAM,CAACO,QAAQ,CAACN,IAAT,CAAc,QAAd,EAAwBG,IAAxB,EAAD,CAAN,CAAuCC,OAAvC,CAA+C,MAA/C;AACH,CAZG,CAAJ,C,CAcA;;AACAP,IAAI,CAACU,IAAL,CAAU,wGAAV;AAAA;AAAA;AAAA;AAAA,wBAAoH;AAAA;AAAA;AAAA;AAAA;AAAA;AAChHC,4BAAMC,IAAN,CAAWC,iBAAX,CAA6B;AACzBC,YAAAA,IAAI,EAAE;AACFC,cAAAA,IAAI,EAAE,CAAC;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAAD;AADJ;AADmB,WAA7B;;AAMMf,UAAAA,OAP0G,GAOhG,qBAAQ,gCAAC,qBAAD;AAAW,YAAA,UAAU,EAAEgB;AAAvB,YAAR,EAA2C;AACvDC,YAAAA,uBAAuB,EAAE;AAD8B,WAA3C,CAPgG;AAAA;AAAA,iBAW1GjB,OAAO,CAACkB,QAAR,GAAmBC,MAAnB,EAX0G;;AAAA;AAa1GH,UAAAA,MAb0G,GAajGnB,IAAI,CAACuB,EAAL,EAbiG;AAchHnB,UAAAA,MAAM,CAACe,MAAM,CAAClB,IAAP,CAAYuB,KAAZ,CAAkBlB,MAAnB,CAAN,CAAiCC,IAAjC,CAAsC,CAAtC;;AAdgH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApH,I,CAiBA;AACA","sourcesContent":["import React from \"react\";\r\nimport { shallow } from \"enzyme\";\r\nimport BioEditor from \"./bioeditor\";\r\nimport axios from \"./axios\";\r\n\r\njest.mock(\"./axios\");\r\n\r\ntest(\"Add is rendered when no bio is passed\", () => {\r\n    const wrapper = shallow(<BioEditor />);\r\n    expect(wrapper.find(\"button\").length).toBe(1);\r\n    expect(wrapper.find(\"button\").text()).toEqual(\"Add your bio now!\");\r\n    //.length here refers to how many button elements available\r\n});\r\n\r\n//test.only(...) is used to run for a particular selected test of this file\r\ntest(\"Edit is rendered when a bio text is passed\", () => {\r\n    const wrapper = shallow(\r\n        <BioEditor bioData=\"some random text for bio testing\" />\r\n    );\r\n    expect(wrapper.find(\"button\").length).toBe(1);\r\n    expect(wrapper.find(\"button\").text()).toEqual(\"Edit\");\r\n});\r\n//\"Edit\" string is case sensitive\r\n\r\ntest(\"clicking Add or Edit button causes textarea and Save button to be rendered\", () => {\r\n    const wrapper = shallow(\r\n        <BioEditor bioData=\"some random text for bio testing\" />\r\n    );\r\n    wrapper.find(\"button\").simulate(\"click\");\r\n    expect(wrapper.find(\"textarea\").length).toBe(1);\r\n    expect(wrapper.find(\"button\").text()).toEqual(\"Save\");\r\n\r\n    const wrapper2 = shallow(<BioEditor />);\r\n    wrapper2.find(\"button\").simulate(\"click\");\r\n    expect(wrapper2.find(\"textarea\").length).toBe(1);\r\n    expect(wrapper2.find(\"button\").text()).toEqual(\"Save\");\r\n});\r\n\r\n///////////////////////////////////////////////4th and 5th test\r\ntest.only(\"When axios request is successful, the function that was passed as a prop to the component gets called.\", async () => {\r\n    axios.post.mockResolvedValue({\r\n        data: {\r\n            rows: [{ biotext: \"random text\" }]\r\n        }\r\n    });\r\n\r\n    const wrapper = shallow(<BioEditor bioHandler={mockFn} />, {\r\n        disableLifecycleMethods: true\r\n    });\r\n\r\n    await wrapper.instance().submit();\r\n\r\n    const mockFn = jest.fn();\r\n    expect(mockFn.mock.calls.length).toBe(1);\r\n});\r\n\r\n//Very often you want to write tests to confirm that your code is causing functions to be called at the right time and in the right way.\r\n//For example, you might wish to confirm that an event handler is actually being called whenever the event occurs or that a callback is called with the correct arguments.\r\n"]}