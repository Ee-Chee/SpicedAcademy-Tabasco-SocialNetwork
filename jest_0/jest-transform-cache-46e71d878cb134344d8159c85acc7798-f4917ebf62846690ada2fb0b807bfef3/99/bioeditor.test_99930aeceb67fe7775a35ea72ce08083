a33094518505266f48f292c29f5561ba
"use strict";

jest.mock("./axios");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _bioeditor = _interopRequireDefault(require("./bioeditor"));

var _axios = _interopRequireDefault(require("./axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

test("Add is rendered when no bio is passed", function () {
  var wrapper = (0, _enzyme.shallow)(_react["default"].createElement(_bioeditor["default"], null));
  expect(wrapper.find("button").length).toBe(1);
  expect(wrapper.find("button").text()).toEqual("Add your bio now!"); //.length here refers to how many button elements available
}); //test.only(...) is used to run for a particular selected test of this file

test("Edit is rendered when a bio text is passed", function () {
  var wrapper = (0, _enzyme.shallow)(_react["default"].createElement(_bioeditor["default"], {
    bioData: "some random text for bio testing"
  }));
  expect(wrapper.find("button").length).toBe(1);
  expect(wrapper.find("button").text()).toEqual("Edit");
}); //"Edit" string is case sensitive

test("clicking Add or Edit button causes textarea and Save button to be rendered", function () {
  var wrapper = (0, _enzyme.shallow)(_react["default"].createElement(_bioeditor["default"], {
    bioData: "some random text for bio testing"
  }));
  wrapper.find("button").simulate("click");
  expect(wrapper.find("textarea").length).toBe(1);
  expect(wrapper.find("button").text()).toEqual("Save");
  var wrapper2 = (0, _enzyme.shallow)(_react["default"].createElement(_bioeditor["default"], null));
  wrapper2.find("button").simulate("click");
  expect(wrapper2.find("textarea").length).toBe(1);
  expect(wrapper2.find("button").text()).toEqual("Save");
}); ///////////////////////////////////////////////4th and 5th test

test("When axios request is successful, the function that was passed as a prop to the component gets called.",
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee() {
  var mockFn, wrapper;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _axios["default"].post.mockResolvedValue({
            data: {
              rows: [{
                biotext: "random text"
              }]
            }
          });

          mockFn = jest.fn(); //mock function must come before shallow

          wrapper = (0, _enzyme.shallow)(_react["default"].createElement(_bioeditor["default"], {
            bioHandler: mockFn
          }));
          _context.next = 5;
          return wrapper.instance().submit();

        case 5:
          //return is added to submit()
          expect(mockFn.mock.calls.length).toBe(1);

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}))); //Very often you want to write tests to confirm that your code is causing functions to be called at the right time and in the right way.
//For example, you might wish to confirm that an event handler is actually being called whenever the event occurs or that a callback is called with the correct arguments.
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpb2VkaXRvci50ZXN0LmpzIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwidGVzdCIsIndyYXBwZXIiLCJleHBlY3QiLCJmaW5kIiwibGVuZ3RoIiwidG9CZSIsInRleHQiLCJ0b0VxdWFsIiwic2ltdWxhdGUiLCJ3cmFwcGVyMiIsImF4aW9zIiwicG9zdCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGF0YSIsInJvd3MiLCJiaW90ZXh0IiwibW9ja0ZuIiwiZm4iLCJpbnN0YW5jZSIsInN1Ym1pdCIsImNhbGxzIl0sIm1hcHBpbmdzIjoiOztBQUtBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxTQUFWOztBQUxBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUlBQyxJQUFJLENBQUMsdUNBQUQsRUFBMEMsWUFBTTtBQUNoRCxNQUFNQyxPQUFPLEdBQUcscUJBQVEsZ0NBQUMscUJBQUQsT0FBUixDQUFoQjtBQUNBQyxFQUFBQSxNQUFNLENBQUNELE9BQU8sQ0FBQ0UsSUFBUixDQUFhLFFBQWIsRUFBdUJDLE1BQXhCLENBQU4sQ0FBc0NDLElBQXRDLENBQTJDLENBQTNDO0FBQ0FILEVBQUFBLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDRSxJQUFSLENBQWEsUUFBYixFQUF1QkcsSUFBdkIsRUFBRCxDQUFOLENBQXNDQyxPQUF0QyxDQUE4QyxtQkFBOUMsRUFIZ0QsQ0FJaEQ7QUFDSCxDQUxHLENBQUosQyxDQU9BOztBQUNBUCxJQUFJLENBQUMsNENBQUQsRUFBK0MsWUFBTTtBQUNyRCxNQUFNQyxPQUFPLEdBQUcscUJBQ1osZ0NBQUMscUJBQUQ7QUFBVyxJQUFBLE9BQU8sRUFBQztBQUFuQixJQURZLENBQWhCO0FBR0FDLEVBQUFBLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDRSxJQUFSLENBQWEsUUFBYixFQUF1QkMsTUFBeEIsQ0FBTixDQUFzQ0MsSUFBdEMsQ0FBMkMsQ0FBM0M7QUFDQUgsRUFBQUEsTUFBTSxDQUFDRCxPQUFPLENBQUNFLElBQVIsQ0FBYSxRQUFiLEVBQXVCRyxJQUF2QixFQUFELENBQU4sQ0FBc0NDLE9BQXRDLENBQThDLE1BQTlDO0FBQ0gsQ0FORyxDQUFKLEMsQ0FPQTs7QUFFQVAsSUFBSSxDQUFDLDRFQUFELEVBQStFLFlBQU07QUFDckYsTUFBTUMsT0FBTyxHQUFHLHFCQUNaLGdDQUFDLHFCQUFEO0FBQVcsSUFBQSxPQUFPLEVBQUM7QUFBbkIsSUFEWSxDQUFoQjtBQUdBQSxFQUFBQSxPQUFPLENBQUNFLElBQVIsQ0FBYSxRQUFiLEVBQXVCSyxRQUF2QixDQUFnQyxPQUFoQztBQUNBTixFQUFBQSxNQUFNLENBQUNELE9BQU8sQ0FBQ0UsSUFBUixDQUFhLFVBQWIsRUFBeUJDLE1BQTFCLENBQU4sQ0FBd0NDLElBQXhDLENBQTZDLENBQTdDO0FBQ0FILEVBQUFBLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDRSxJQUFSLENBQWEsUUFBYixFQUF1QkcsSUFBdkIsRUFBRCxDQUFOLENBQXNDQyxPQUF0QyxDQUE4QyxNQUE5QztBQUVBLE1BQU1FLFFBQVEsR0FBRyxxQkFBUSxnQ0FBQyxxQkFBRCxPQUFSLENBQWpCO0FBQ0FBLEVBQUFBLFFBQVEsQ0FBQ04sSUFBVCxDQUFjLFFBQWQsRUFBd0JLLFFBQXhCLENBQWlDLE9BQWpDO0FBQ0FOLEVBQUFBLE1BQU0sQ0FBQ08sUUFBUSxDQUFDTixJQUFULENBQWMsVUFBZCxFQUEwQkMsTUFBM0IsQ0FBTixDQUF5Q0MsSUFBekMsQ0FBOEMsQ0FBOUM7QUFDQUgsRUFBQUEsTUFBTSxDQUFDTyxRQUFRLENBQUNOLElBQVQsQ0FBYyxRQUFkLEVBQXdCRyxJQUF4QixFQUFELENBQU4sQ0FBdUNDLE9BQXZDLENBQStDLE1BQS9DO0FBQ0gsQ0FaRyxDQUFKLEMsQ0FjQTs7QUFDQVAsSUFBSSxDQUFDLHdHQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsd0JBQTJHO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUMzR1UsNEJBQU1DLElBQU4sQ0FBV0MsaUJBQVgsQ0FBNkI7QUFDekJDLFlBQUFBLElBQUksRUFBRTtBQUNGQyxjQUFBQSxJQUFJLEVBQUUsQ0FBQztBQUFFQyxnQkFBQUEsT0FBTyxFQUFFO0FBQVgsZUFBRDtBQURKO0FBRG1CLFdBQTdCOztBQUtNQyxVQUFBQSxNQU5xRyxHQU01RmxCLElBQUksQ0FBQ21CLEVBQUwsRUFONEYsRUFNakY7O0FBQ3BCaEIsVUFBQUEsT0FQcUcsR0FPM0YscUJBQVEsZ0NBQUMscUJBQUQ7QUFBVyxZQUFBLFVBQVUsRUFBRWU7QUFBdkIsWUFBUixDQVAyRjtBQUFBO0FBQUEsaUJBUXJHZixPQUFPLENBQUNpQixRQUFSLEdBQW1CQyxNQUFuQixFQVJxRzs7QUFBQTtBQVF4RTtBQUNuQ2pCLFVBQUFBLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDakIsSUFBUCxDQUFZcUIsS0FBWixDQUFrQmhCLE1BQW5CLENBQU4sQ0FBaUNDLElBQWpDLENBQXNDLENBQXRDOztBQVQyRztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUEzRyxHQUFKLEMsQ0FZQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBzaGFsbG93IH0gZnJvbSBcImVuenltZVwiO1xyXG5pbXBvcnQgQmlvRWRpdG9yIGZyb20gXCIuL2Jpb2VkaXRvclwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcIi4vYXhpb3NcIjtcclxuXHJcbmplc3QubW9jayhcIi4vYXhpb3NcIik7XHJcblxyXG50ZXN0KFwiQWRkIGlzIHJlbmRlcmVkIHdoZW4gbm8gYmlvIGlzIHBhc3NlZFwiLCAoKSA9PiB7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyg8QmlvRWRpdG9yIC8+KTtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoXCJidXR0b25cIikubGVuZ3RoKS50b0JlKDEpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChcImJ1dHRvblwiKS50ZXh0KCkpLnRvRXF1YWwoXCJBZGQgeW91ciBiaW8gbm93IVwiKTtcclxuICAgIC8vLmxlbmd0aCBoZXJlIHJlZmVycyB0byBob3cgbWFueSBidXR0b24gZWxlbWVudHMgYXZhaWxhYmxlXHJcbn0pO1xyXG5cclxuLy90ZXN0Lm9ubHkoLi4uKSBpcyB1c2VkIHRvIHJ1biBmb3IgYSBwYXJ0aWN1bGFyIHNlbGVjdGVkIHRlc3Qgb2YgdGhpcyBmaWxlXHJcbnRlc3QoXCJFZGl0IGlzIHJlbmRlcmVkIHdoZW4gYSBiaW8gdGV4dCBpcyBwYXNzZWRcIiwgKCkgPT4ge1xyXG4gICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coXHJcbiAgICAgICAgPEJpb0VkaXRvciBiaW9EYXRhPVwic29tZSByYW5kb20gdGV4dCBmb3IgYmlvIHRlc3RpbmdcIiAvPlxyXG4gICAgKTtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoXCJidXR0b25cIikubGVuZ3RoKS50b0JlKDEpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChcImJ1dHRvblwiKS50ZXh0KCkpLnRvRXF1YWwoXCJFZGl0XCIpO1xyXG59KTtcclxuLy9cIkVkaXRcIiBzdHJpbmcgaXMgY2FzZSBzZW5zaXRpdmVcclxuXHJcbnRlc3QoXCJjbGlja2luZyBBZGQgb3IgRWRpdCBidXR0b24gY2F1c2VzIHRleHRhcmVhIGFuZCBTYXZlIGJ1dHRvbiB0byBiZSByZW5kZXJlZFwiLCAoKSA9PiB7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyhcclxuICAgICAgICA8QmlvRWRpdG9yIGJpb0RhdGE9XCJzb21lIHJhbmRvbSB0ZXh0IGZvciBiaW8gdGVzdGluZ1wiIC8+XHJcbiAgICApO1xyXG4gICAgd3JhcHBlci5maW5kKFwiYnV0dG9uXCIpLnNpbXVsYXRlKFwiY2xpY2tcIik7XHJcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKFwidGV4dGFyZWFcIikubGVuZ3RoKS50b0JlKDEpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChcImJ1dHRvblwiKS50ZXh0KCkpLnRvRXF1YWwoXCJTYXZlXCIpO1xyXG5cclxuICAgIGNvbnN0IHdyYXBwZXIyID0gc2hhbGxvdyg8QmlvRWRpdG9yIC8+KTtcclxuICAgIHdyYXBwZXIyLmZpbmQoXCJidXR0b25cIikuc2ltdWxhdGUoXCJjbGlja1wiKTtcclxuICAgIGV4cGVjdCh3cmFwcGVyMi5maW5kKFwidGV4dGFyZWFcIikubGVuZ3RoKS50b0JlKDEpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIyLmZpbmQoXCJidXR0b25cIikudGV4dCgpKS50b0VxdWFsKFwiU2F2ZVwiKTtcclxufSk7XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzR0aCBhbmQgNXRoIHRlc3RcclxudGVzdChcIldoZW4gYXhpb3MgcmVxdWVzdCBpcyBzdWNjZXNzZnVsLCB0aGUgZnVuY3Rpb24gdGhhdCB3YXMgcGFzc2VkIGFzIGEgcHJvcCB0byB0aGUgY29tcG9uZW50IGdldHMgY2FsbGVkLlwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBheGlvcy5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIHJvd3M6IFt7IGJpb3RleHQ6IFwicmFuZG9tIHRleHRcIiB9XVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgbW9ja0ZuID0gamVzdC5mbigpOyAvL21vY2sgZnVuY3Rpb24gbXVzdCBjb21lIGJlZm9yZSBzaGFsbG93XHJcbiAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyg8QmlvRWRpdG9yIGJpb0hhbmRsZXI9e21vY2tGbn0gLz4pO1xyXG4gICAgYXdhaXQgd3JhcHBlci5pbnN0YW5jZSgpLnN1Ym1pdCgpOyAvL3JldHVybiBpcyBhZGRlZCB0byBzdWJtaXQoKVxyXG4gICAgZXhwZWN0KG1vY2tGbi5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKTtcclxufSk7XHJcblxyXG4vL1Zlcnkgb2Z0ZW4geW91IHdhbnQgdG8gd3JpdGUgdGVzdHMgdG8gY29uZmlybSB0aGF0IHlvdXIgY29kZSBpcyBjYXVzaW5nIGZ1bmN0aW9ucyB0byBiZSBjYWxsZWQgYXQgdGhlIHJpZ2h0IHRpbWUgYW5kIGluIHRoZSByaWdodCB3YXkuXHJcbi8vRm9yIGV4YW1wbGUsIHlvdSBtaWdodCB3aXNoIHRvIGNvbmZpcm0gdGhhdCBhbiBldmVudCBoYW5kbGVyIGlzIGFjdHVhbGx5IGJlaW5nIGNhbGxlZCB3aGVuZXZlciB0aGUgZXZlbnQgb2NjdXJzIG9yIHRoYXQgYSBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCB0aGUgY29ycmVjdCBhcmd1bWVudHMuXHJcbiJdfQ==